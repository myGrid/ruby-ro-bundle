var search_data = {"index":{"searchIndex":["robundle","agent","aggregate","annotation","file","invalidaggregateerror","manifest","provenance","rodir","annotationsdir","roerror","util","add()","add_aggregate()","add_aggregate()","add_annotation()","add_annotation()","add_author()","add_context()","add_history()","add_history()","aggregate?()","aggregates()","annotatable?()","annotation?()","annotation_id()","annotations()","authored_by()","authored_on()","authored_on=()","clean_json()","close()","commit()","commit_required?()","content()","content=()","context()","create()","created_by()","created_by=()","created_on()","created_on=()","edited?()","file()","file_entry()","find_entry()","history()","id()","id=()","is_absolute_uri?()","mediatype()","name()","new()","new()","new()","new()","new()","new()","new()","orcid()","parse_time()","remove()","remove_aggregate()","remove_aggregate()","remove_annotation()","remove_author()","strip_leading_slash()","target()","to_json()","to_json()","to_json()","to_json()","uri()","uri()","validate()","changes","licence","readme"],"longSearchIndex":["robundle","robundle::agent","robundle::aggregate","robundle::annotation","robundle::file","robundle::invalidaggregateerror","robundle::manifest","robundle::provenance","robundle::rodir","robundle::rodir::annotationsdir","robundle::roerror","robundle::util","robundle::file#add()","robundle::file#add_aggregate()","robundle::manifest#add_aggregate()","robundle::file#add_annotation()","robundle::manifest#add_annotation()","robundle::provenance#add_author()","robundle::manifest#add_context()","robundle::file#add_history()","robundle::manifest#add_history()","robundle::file#aggregate?()","robundle::manifest#aggregates()","robundle::file#annotatable?()","robundle::file#annotation?()","robundle::annotation#annotation_id()","robundle::manifest#annotations()","robundle::provenance#authored_by()","robundle::provenance#authored_on()","robundle::provenance#authored_on=()","robundle::util::clean_json()","robundle::file#close()","robundle::file#commit()","robundle::file#commit_required?()","robundle::annotation#content()","robundle::annotation#content=()","robundle::manifest#context()","robundle::file::create()","robundle::provenance#created_by()","robundle::provenance#created_by=()","robundle::provenance#created_on()","robundle::provenance#created_on=()","robundle::manifest#edited?()","robundle::aggregate#file()","robundle::aggregate#file_entry()","robundle::file#find_entry()","robundle::manifest#history()","robundle::manifest#id()","robundle::manifest#id=()","robundle::util::is_absolute_uri?()","robundle::aggregate#mediatype()","robundle::agent#name()","robundle::agent::new()","robundle::aggregate::new()","robundle::annotation::new()","robundle::invalidaggregateerror::new()","robundle::manifest::new()","robundle::rodir::new()","robundle::rodir::annotationsdir::new()","robundle::agent#orcid()","robundle::util::parse_time()","robundle::file#remove()","robundle::file#remove_aggregate()","robundle::manifest#remove_aggregate()","robundle::manifest#remove_annotation()","robundle::provenance#remove_author()","robundle::util::strip_leading_slash()","robundle::annotation#target()","robundle::agent#to_json()","robundle::aggregate#to_json()","robundle::annotation#to_json()","robundle::manifest#to_json()","robundle::agent#uri()","robundle::aggregate#uri()","robundle::manifest#validate()","","",""],"info":[["ROBundle","","ROBundle.html","","<p>This is a ruby library to read and write Research Object Bundle files in PK\nZip format. See the ROBundle::File …\n"],["ROBundle::Agent","","ROBundle/Agent.html","","<p>A class to represent an agent in a Research Object. An agent can be, for\nexample, a person or software. …\n"],["ROBundle::Aggregate","","ROBundle/Aggregate.html","","<p>A class to represent an aggregated resource in a Research Object. It holds\nstandard meta-data for either …\n"],["ROBundle::Annotation","","ROBundle/Annotation.html","","<p>A class to represent an Annotation in a Research Object.\n"],["ROBundle::File","","ROBundle/File.html","","<p>This class represents a Research Object Bundle file. See the RO Bundle\nspecification for more details. …\n"],["ROBundle::InvalidAggregateError","","ROBundle/InvalidAggregateError.html","","<p>This exception is raised when an invalid aggregate is detected.\n"],["ROBundle::Manifest","","ROBundle/Manifest.html","","<p>The manifest.json managed file entry for a Research Object.\n"],["ROBundle::Provenance","","ROBundle/Provenance.html","","<p>This module is a mixin for Research Object provenance information.\n<p>To use this module simply provide an …\n"],["ROBundle::RODir","","ROBundle/RODir.html","","<p>The managed .ro directory entry of a Research Object.\n<p>For internal use only.\n"],["ROBundle::RODir::AnnotationsDir","","ROBundle/RODir/AnnotationsDir.html","","<p>The managed annotations directory within the .ro directory.\n<p>For internal use only.\n"],["ROBundle::ROError","","ROBundle/ROError.html","","<p>The base of all exceptions raised by this library.\n"],["ROBundle::Util","","ROBundle/Util.html","","<p>A module with lots of utility functions.\n"],["add","ROBundle::File","ROBundle/File.html#method-i-add","(entry, src_path, options = {}, &continue_on_exists_proc)","<p>Convenience method for adding the contents of a file to the bundle file. If\nasked to add a file with …\n"],["add_aggregate","ROBundle::File","ROBundle/File.html#method-i-add_aggregate","(entry, src_path = nil, &continue_on_exists_proc)","<p>The first form of this method adds a URI as an aggregate of the bundle.\n<p>The second form adds an already …\n"],["add_aggregate","ROBundle::Manifest","ROBundle/Manifest.html#method-i-add_aggregate","(entry)","<p>Add the given entry or URI to the list of aggregates in this manifest.\n<code>Errno:ENOENT</code> is raised if the …\n"],["add_annotation","ROBundle::File","ROBundle/File.html#method-i-add_annotation","(target, body = nil, options = {})","<p>This method has two forms.\n<p>The first form registers an already initialized Annotation object in this \n…\n"],["add_annotation","ROBundle::Manifest","ROBundle/Manifest.html#method-i-add_annotation","(object, content = nil)","<p>Add an annotation to this Research Object. An annotation can either be an\nalready created annotation …\n"],["add_author","ROBundle::Provenance","ROBundle/Provenance.html#method-i-add_author","(author)","<p>Add an author to the list of authors for this Research Object. The supplied\nparameter can either be an …\n"],["add_context","ROBundle::Manifest","ROBundle/Manifest.html#method-i-add_context","(uri)","<p>Add a URI to the front of the @context list.\n"],["add_history","ROBundle::File","ROBundle/File.html#method-i-add_history","(entry, src_path = nil, &continue_on_exists_proc)","<p>The first form of this method adds an already existing entry in the bundle\nto the history list in the …\n"],["add_history","ROBundle::Manifest","ROBundle/Manifest.html#method-i-add_history","(entry)","<p>Add the given entry to the history list in this manifest.\n<code>Errno:ENOENT</code> is raised if the entry does not …\n"],["aggregate?","ROBundle::File","ROBundle/File.html#method-i-aggregate-3F","(entry)","<p>Is the supplied URI or entry aggregated in this Research Object?\n"],["aggregates","ROBundle::Manifest","ROBundle/Manifest.html#method-i-aggregates","()","<p>Return a list of all the aggregated resources in this Research Object.\n"],["annotatable?","ROBundle::File","ROBundle/File.html#method-i-annotatable-3F","(target)","<p>Is the supplied target an annotatable resource? An annotatable resource is\neither an absolute URI (which …\n"],["annotation?","ROBundle::File","ROBundle/File.html#method-i-annotation-3F","(id)","<p>Is the supplied id or annotation registered in this Research Object?\n"],["annotation_id","ROBundle::Annotation","ROBundle/Annotation.html#method-i-annotation_id","()","<p>Return the annotation id of this Annotation.\n"],["annotations","ROBundle::Manifest","ROBundle/Manifest.html#method-i-annotations","()","<p>Return a list of all the annotations in this Research Object.\n"],["authored_by","ROBundle::Provenance","ROBundle/Provenance.html#method-i-authored_by","()","<p>Return the list of Agents that authored this Research Object.\n"],["authored_on","ROBundle::Provenance","ROBundle/Provenance.html#method-i-authored_on","()","<p>Return the time that this RO Bundle was edited as a Time object, or\n<code>nil</code> if not present in the manifest. …\n"],["authored_on=","ROBundle::Provenance","ROBundle/Provenance.html#method-i-authored_on-3D","(new_time)","<p>Set a new authoredOn time for this Manifest. Anything that Ruby can\ninterpret as a time is accepted and …\n"],["clean_json","ROBundle::Util","ROBundle/Util.html#method-c-clean_json","(structure)","<p>Remove empty strings and nils from a json hash structure.\n"],["close","ROBundle::File","ROBundle/File.html#method-i-close","()",""],["commit","ROBundle::File","ROBundle/File.html#method-i-commit","()","<p>Commits changes that have been made since the previous commit to the RO\nBundle file. Returns <code>true</code> if …\n"],["commit_required?","ROBundle::File","ROBundle/File.html#method-i-commit_required-3F","()","<p>Returns <code>true</code> if any changes have been made to this RO Bundle\nfile since the last commit, <code>false</code> otherwise. …\n"],["content","ROBundle::Annotation","ROBundle/Annotation.html#method-i-content","()","<p>The identifier for a resource that contains the body of the annotation.\n"],["content=","ROBundle::Annotation","ROBundle/Annotation.html#method-i-content-3D","(new_content)","<p>Set the content of this annotation.\n"],["context","ROBundle::Manifest","ROBundle/Manifest.html#method-i-context","()","<p>Return the list of @context URIs for this Research Object manifest.\n"],["create","ROBundle::File","ROBundle/File.html#method-c-create","(filename, mimetype = MIMETYPE, &block)","<p>Create a new RO Bundle file on disk and open it for editing. A custom\nmimetype for the bundle may be …\n"],["created_by","ROBundle::Provenance","ROBundle/Provenance.html#method-i-created_by","()","<p>Return the Agent that created this Research Object.\n"],["created_by=","ROBundle::Provenance","ROBundle/Provenance.html#method-i-created_by-3D","(new_creator)","<p>Set the Agent that has created this RO Bundle. Anything passed to this\nmethod that is not an Agent will …\n"],["created_on","ROBundle::Provenance","ROBundle/Provenance.html#method-i-created_on","()","<p>Return the time that this RO Bundle was created as a Time object, or\n<code>nil</code> if not present in the manifest. …\n"],["created_on=","ROBundle::Provenance","ROBundle/Provenance.html#method-i-created_on-3D","(new_time)","<p>Set a new createdOn time for this Manifest. Anything that Ruby can\ninterpret as a time is accepted and …\n"],["edited?","ROBundle::Manifest","ROBundle/Manifest.html#method-i-edited-3F","()","<p>Has this manifest been altered in any way?\n"],["file","ROBundle::Aggregate","ROBundle/Aggregate.html#method-i-file","()","<p>The path of this aggregate. It should start with ‘/’.\n"],["file_entry","ROBundle::Aggregate","ROBundle/Aggregate.html#method-i-file_entry","()","<p>The path of this aggregate in “rubyzip” format, i.e. no leading ‘/’.\n"],["find_entry","ROBundle::File","ROBundle/File.html#method-i-find_entry","(entry_name, options = {})","<p>Searches for the entry with the specified name. Returns <code>nil</code> if\nno entry is found or if the specified …\n"],["history","ROBundle::Manifest","ROBundle/Manifest.html#method-i-history","()","<p>Return a list of filenames that hold provenance information for this\nResearch Object.\n"],["id","ROBundle::Manifest","ROBundle/Manifest.html#method-i-id","()","<p>An RO identifier (usually ‘/’) indicating the relative top-level folder as\nthe identifier.\n"],["id=","ROBundle::Manifest","ROBundle/Manifest.html#method-i-id-3D","(new_id)","<p>Set the id of this Manifest.\n"],["is_absolute_uri?","ROBundle::Util","ROBundle/Util.html#method-c-is_absolute_uri-3F","(uri)","<p>Is the supplied URI absolute? An absolute URI is a valid URI that starts\nwith a scheme, such as http, …\n"],["mediatype","ROBundle::Aggregate","ROBundle/Aggregate.html#method-i-mediatype","()","<p>For a file aggregate, its IANA media type.\n"],["name","ROBundle::Agent","ROBundle/Agent.html#method-i-name","()","<p>The name of this agent.\n"],["new","ROBundle::Agent","ROBundle/Agent.html#method-c-new","(first, uri = nil, orcid = nil)","<p>Create a new Agent with the supplied details. If <code>uri</code> or\n<code>orcid</code> are not absolute URIs then they are set …\n"],["new","ROBundle::Aggregate","ROBundle/Aggregate.html#method-c-new","(object, second = nil)","<p>Create a new file or URI aggregate.\n"],["new","ROBundle::Annotation","ROBundle/Annotation.html#method-c-new","(object, content = nil)","<p>Create a new Annotation with the specified “about” identifier. A new\nannotation ID is generated …\n"],["new","ROBundle::InvalidAggregateError","ROBundle/InvalidAggregateError.html#method-c-new","(object)","<p>Create a new InvalidAggregateError with the invalid object (file or URI)\nsupplied.\n"],["new","ROBundle::Manifest","ROBundle/Manifest.html#method-c-new","()","<p>Create a new managed file entry to represent the manifest.json file.\n"],["new","ROBundle::RODir","ROBundle/RODir.html#method-c-new","(manifest)","<p>Create a new .ro managed directory entry with the specified manifest file\nobject.\n"],["new","ROBundle::RODir::AnnotationsDir","ROBundle/RODir/AnnotationsDir.html#method-c-new","()","<p>Create a new annotations managed directory. The directory is hidden under\nnormal circumstances.\n"],["orcid","ROBundle::Agent","ROBundle/Agent.html#method-i-orcid","()","<p>An ORCID identifier URI for this agent.\n"],["parse_time","ROBundle::Util","ROBundle/Util.html#method-c-parse_time","(time)","<p>Parse a time string into a Time object. Does not try to parse\n<code>nil</code>.\n"],["remove","ROBundle::File","ROBundle/File.html#method-i-remove","(entry, preserve_manifest = false)","<p>Removes the specified entry from the Research Object bundle. If asked to\nremove any reserved files such …\n"],["remove_aggregate","ROBundle::File","ROBundle/File.html#method-i-remove_aggregate","(object, options = {})","<p>Remove (unregister) an aggregate from this Research Object. If it is a file\nthen the file is no longer …\n"],["remove_aggregate","ROBundle::Manifest","ROBundle/Manifest.html#method-i-remove_aggregate","(object)","<p>Remove (unregister) an aggregate from this Research Object. If a filename\nis supplied then the file is …\n"],["remove_annotation","ROBundle::Manifest","ROBundle/Manifest.html#method-i-remove_annotation","(object)","<p>Remove (unregister) annotations from this Research Object and return them.\nReturn <code>nil</code> if the annotation …\n"],["remove_author","ROBundle::Provenance","ROBundle/Provenance.html#method-i-remove_author","(object)","<p>Remove the specified author or all authors with the specified name from the\n<code>authoredBy</code> field.\n"],["strip_leading_slash","ROBundle::Util","ROBundle/Util.html#method-c-strip_leading_slash","(string)","<p>Return the supplied string with a leading slash removed.\n"],["target","ROBundle::Annotation","ROBundle/Annotation.html#method-i-target","()","<p>The identifier for the annotated resource. This is considered the target of\nthe annotation, that is the …\n"],["to_json","ROBundle::Agent","ROBundle/Agent.html#method-i-to_json","(*a)","<p>Write this Agent out as a json string. Takes the same options as\nJSON#generate.\n"],["to_json","ROBundle::Aggregate","ROBundle/Aggregate.html#method-i-to_json","(*a)","<p>Write this Aggregate out as a json string. Takes the same options as\nJSON#generate.\n"],["to_json","ROBundle::Annotation","ROBundle/Annotation.html#method-i-to_json","(*a)","<p>Write this Annotation out as a json string. Takes the same options as\nJSON#generate.\n"],["to_json","ROBundle::Manifest","ROBundle/Manifest.html#method-i-to_json","(*a)","<p>Write this Manifest out as a json string. Takes the same options as\nJSON#generate.\n"],["uri","ROBundle::Agent","ROBundle/Agent.html#method-i-uri","()","<p>A URI identifying the agent. This should, if it exists, be a WebID.\n"],["uri","ROBundle::Aggregate","ROBundle/Aggregate.html#method-i-uri","()","<p>The URI of this aggregate. It should be an absolute URI.\n"],["validate","ROBundle::Manifest","ROBundle/Manifest.html#method-i-validate","()","<p>Validate the correctness of the manifest file contents.\n"],["Changes","","Changes_rdoc.html","","<p>Changes log for the RO Bundle Ruby Gem\n<p>Version 0.1.0\n<p>Use the ZipContainer::ZipError in examples and tests. …\n"],["Licence","","Licence_rdoc.html","","<p>Copyright © 2014 The University of Manchester, UK.\n<p>All rights reserved.\n<p>Redistribution and use in source …\n"],["ReadMe","","ReadMe_rdoc.html","","<p>Research Object Bundle Ruby Library\n<p>Authors &mdash; Robert Haines\n<p>Contact &mdash; support@mygrid.org.uk\n"]]}}